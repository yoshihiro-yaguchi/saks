{
    // Place your tcis ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    "react-component": {
        "prefix": "react-component",
        "body": [
            "import { useAppDispatch, useAppSelector } from '@src/app/hooks'",
            "import { RootState } from '@src/app/store'",
            "import { useEffect } from 'react'",
            " import { operations } from './operation'",
            "",
            "export const #{COMPONENT_NAME} = () => {",
            "  const dispatch = useAppDispatch()",
            "  // 共通ステート",
            "  const commonState = useAppSelector((s: RootState) => s.common)",
            "",
            "  // 画面ロード時処理",
            "  useEffect(() => {",
            "   dispatch(operations.init())",
            "  }, [])",
            "",
            "  return <></>",
            "}"
        ],
        "description": "react-component"
    },
    "react-tsx": {
        "prefix": "react-tsx",
        "body": [
            "import { useAppDispatch, useAppSelector } from '@src/app/hooks'",
            "import { RootState, store } from '@src/app/store'",
            "import { actions } from './reducer'",
            "import { operations } from './operations'",
            "import { createRoot } from 'react-dom/client'",
            "import { Provider } from 'react-redux'",
            "import React from 'react'",
            "import reportWebVitals from '@resource/ts/src/reportWebVitals'",
            "",
            "export const Index = () => {",
            "  const dispatch = useAppDispatch()",
            "  // 画面項目",
            "  const contactStates = useAppSelector((s: RootState) => s.#{REDUCER_NAME}.screenState)",
            "  // 画面コントロール",
            "  const contactScreenControl = useAppSelector((s: RootState) => s.#{REDUCER_NAME}.controlState)",
            "  // 値入力時ハンドラ",
            "  const onInputHandle = (e: React.ChangeEvent<HTMLInputElement>) => {",
            "    dispatch(contactActions.onInputHandle({ name: e.target.name, value: e.target.value }))",
            "  }",
            "  return (",
            "    <>",
            "    </>",
            "  )",
            "}",
            "",
            "const container = document.getElementById(\"#{ID}\")!",
            "const root = createRoot(container)",
            "",
            "root.render(",
            "  <React.StrictMode>",
            "    <Provider store={store}>",
            "      <Index />",
            "    </Provider>",
            "  </React.StrictMode>",
            ")",
            "",
            "reportWebVitals()"
        ],
        "description": "reactTSX"
    },
    "react-reducer": {
        "prefix": "react-reducer",
        "body": [
            "import { createSlice, PayloadAction } from '@reduxjs/toolkit'",
            "",
            "const initialState: #{STATE_NAME} = {",
            "  #{STATE_NAME}: #{INIT_STATE_NAME},",
            "}",
            "",
            "export const #{FUNC_NAME} = createSlice({",
            "  name: '#{FUNC_NAME}',",
            "  initialState,",
            "  reducers: {",
            "    /**",
            "     * ステートリセット",
            "     * ",
            "     * @returns",
            "     */",
            "    reset: () => initialState,"
            "    /**",
            "     * サンプル",
            "     *",
            "     * @param state",
            "     * @param action",
            "     */",
            "    sample: (state, action: PayloadAction<{ name: string; value: string }>) => {",
            "      console.log('サンプル')",
            "    },"
            "  },",
            "})",
            "export const { actions } = #{FUNC_NAME}"
        ],
        "description": "react-reducer"
    },
    "react-operations": {
        "prefix": "react-operations",
        "body": [
            "import { AppThunk } from '@src/app/store'",
            "import { commonOperations } from '@resource/ts/src/common/commonOperations'",
            "",
            "export const operations = {",
            "  /**",
            "   * 初期処理",
            "   *",
            "   * @returns",
            "   */",
            "  init: (): AppThunk => async (dispatch, getState) => {",
            "    await dispatch(commonOperations.processStart())",
            "    await dispatch(commonOperations.init(#{画面タイトル}))",
            "    dispatch(commonOperations.processEnd())",
            "  },",
            "}"
        ],
        "description": "react-operations"
    },
    "react-api": {
        "prefix": "react-api",
        "body": [
            "import axios from 'axios'",
            "",
            "export const apis = {",
            "  doInit: async (params: URLSearchParams) => {",
            "    return await axios.get<string>(`sample/getMethod?${params.toString()}`)",
            "  },",
            "  doPost: async (params: URLSearchParams) => {",
            "    return await axios.post<string>(`sample/postMethod`, params)",
            "  },",
            "}"
        ],
        "description": "react-api"
    },
    "react-operate": {
        "prefix": "react-operate",
        "body": [
            "  operate: ():AppThunk => async (dispatch, getState) => {",
            "    await dispatch(commonOperations.processStart())",
            "    dispatch(commonOperations.processEnd())",
            "  }",
        ]
    }
}
